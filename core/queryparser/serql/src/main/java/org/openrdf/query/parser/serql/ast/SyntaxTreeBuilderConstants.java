/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderConstants.java */
package org.openrdf.query.parser.serql.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxTreeBuilderConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int EQ = 6;
  /** RegularExpression Id. */
  int NE = 7;
  /** RegularExpression Id. */
  int LT = 8;
  /** RegularExpression Id. */
  int LE = 9;
  /** RegularExpression Id. */
  int GE = 10;
  /** RegularExpression Id. */
  int GT = 11;
  /** RegularExpression Id. */
  int STAR = 12;
  /** RegularExpression Id. */
  int COMMA = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int LBRACE = 15;
  /** RegularExpression Id. */
  int RBRACE = 16;
  /** RegularExpression Id. */
  int LPAREN = 17;
  /** RegularExpression Id. */
  int RPAREN = 18;
  /** RegularExpression Id. */
  int LBRACK = 19;
  /** RegularExpression Id. */
  int RBRACK = 20;
  /** RegularExpression Id. */
  int USING = 21;
  /** RegularExpression Id. */
  int NAMESPACE = 22;
  /** RegularExpression Id. */
  int SELECT = 23;
  /** RegularExpression Id. */
  int CONSTRUCT = 24;
  /** RegularExpression Id. */
  int DISTINCT = 25;
  /** RegularExpression Id. */
  int FROM = 26;
  /** RegularExpression Id. */
  int CONTEXT = 27;
  /** RegularExpression Id. */
  int WHERE = 28;
  /** RegularExpression Id. */
  int LIMIT = 29;
  /** RegularExpression Id. */
  int OFFSET = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int NOT = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int LIKE = 36;
  /** RegularExpression Id. */
  int IGNORE = 37;
  /** RegularExpression Id. */
  int CASE = 38;
  /** RegularExpression Id. */
  int LABEL = 39;
  /** RegularExpression Id. */
  int LANG = 40;
  /** RegularExpression Id. */
  int DATATYPE = 41;
  /** RegularExpression Id. */
  int LOCALNAME = 42;
  /** RegularExpression Id. */
  int BOUND = 43;
  /** RegularExpression Id. */
  int NULL = 44;
  /** RegularExpression Id. */
  int ISRESOURCE = 45;
  /** RegularExpression Id. */
  int ISBNODE = 46;
  /** RegularExpression Id. */
  int ISURI = 47;
  /** RegularExpression Id. */
  int ISLITERAL = 48;
  /** RegularExpression Id. */
  int AS = 49;
  /** RegularExpression Id. */
  int UNION = 50;
  /** RegularExpression Id. */
  int MINUS = 51;
  /** RegularExpression Id. */
  int INTERSECT = 52;
  /** RegularExpression Id. */
  int ANY = 53;
  /** RegularExpression Id. */
  int ALL = 54;
  /** RegularExpression Id. */
  int IN = 55;
  /** RegularExpression Id. */
  int EXISTS = 56;
  /** RegularExpression Id. */
  int LANG_LITERAL = 57;
  /** RegularExpression Id. */
  int DATATYPED_LITERAL = 58;
  /** RegularExpression Id. */
  int STRING = 59;
  /** RegularExpression Id. */
  int SAFE_CHAR = 60;
  /** RegularExpression Id. */
  int ESCAPED_CHAR = 61;
  /** RegularExpression Id. */
  int UNICODE_ESC = 62;
  /** RegularExpression Id. */
  int LANG_TAG = 63;
  /** RegularExpression Id. */
  int URI = 64;
  /** RegularExpression Id. */
  int SCHEME = 65;
  /** RegularExpression Id. */
  int QNAME = 66;
  /** RegularExpression Id. */
  int BNODE = 67;
  /** RegularExpression Id. */
  int PREFIX_NAME = 68;
  /** RegularExpression Id. */
  int POS_INTEGER = 69;
  /** RegularExpression Id. */
  int NEG_INTEGER = 70;
  /** RegularExpression Id. */
  int DECIMAL = 71;
  /** RegularExpression Id. */
  int HEX = 72;
  /** RegularExpression Id. */
  int ALPHA = 73;
  /** RegularExpression Id. */
  int NUM = 74;
  /** RegularExpression Id. */
  int NCNAME = 75;
  /** RegularExpression Id. */
  int NCNAME_CHAR = 76;
  /** RegularExpression Id. */
  int LETTER = 77;
  /** RegularExpression Id. */
  int BASECHAR = 78;
  /** RegularExpression Id. */
  int IDEOGRAPHIC = 79;
  /** RegularExpression Id. */
  int COMBINING_CHAR = 80;
  /** RegularExpression Id. */
  int DIGIT = 81;
  /** RegularExpression Id. */
  int EXTENDER = 82;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\">\"",
    "\"*\"",
    "\",\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"using\"",
    "\"namespace\"",
    "\"select\"",
    "\"construct\"",
    "\"distinct\"",
    "\"from\"",
    "\"context\"",
    "\"where\"",
    "\"limit\"",
    "\"offset\"",
    "\"true\"",
    "\"false\"",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\"like\"",
    "\"ignore\"",
    "\"case\"",
    "\"label\"",
    "\"lang\"",
    "\"datatype\"",
    "\"localname\"",
    "\"bound\"",
    "\"null\"",
    "\"isResource\"",
    "\"isBNode\"",
    "\"isURI\"",
    "\"isLiteral\"",
    "\"as\"",
    "\"union\"",
    "\"minus\"",
    "\"intersect\"",
    "\"any\"",
    "\"all\"",
    "\"in\"",
    "\"exists\"",
    "<LANG_LITERAL>",
    "<DATATYPED_LITERAL>",
    "<STRING>",
    "<SAFE_CHAR>",
    "<ESCAPED_CHAR>",
    "<UNICODE_ESC>",
    "<LANG_TAG>",
    "<URI>",
    "<SCHEME>",
    "<QNAME>",
    "<BNODE>",
    "<PREFIX_NAME>",
    "<POS_INTEGER>",
    "<NEG_INTEGER>",
    "<DECIMAL>",
    "<HEX>",
    "<ALPHA>",
    "<NUM>",
    "<NCNAME>",
    "<NCNAME_CHAR>",
    "<LETTER>",
    "<BASECHAR>",
    "<IDEOGRAPHIC>",
    "<COMBINING_CHAR>",
    "<DIGIT>",
    "<EXTENDER>",
  };

}
