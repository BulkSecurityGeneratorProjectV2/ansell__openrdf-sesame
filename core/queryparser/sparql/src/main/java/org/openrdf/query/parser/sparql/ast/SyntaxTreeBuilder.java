/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilder.java */
package org.openrdf.query.parser.sparql.ast;

import java.io.StringReader;

import org.openrdf.model.URI;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.query.algebra.Compare.CompareOp;
import org.openrdf.query.algebra.MathExpr.MathOp;

public class SyntaxTreeBuilder/*@bgen(jjtree)*/implements SyntaxTreeBuilderTreeConstants, SyntaxTreeBuilderConstants {/*@bgen(jjtree)*/
  protected JJTSyntaxTreeBuilderState jjtree = new JJTSyntaxTreeBuilderState();
        /**
	 * Parses the supplied SPARQL query and builds a syntax tree from it.
	 *
	 * @param query A SPARQL query string.
	 * @return The root of the syntax tree.
	 * @throws TokenMgrError If the query was syntactically incorrect.
	 * @throws ParseException If the query was syntactically incorrect.
	 */
        public static ASTQueryContainer parseQuery(String query)
                throws TokenMgrError, ParseException
        {
                SyntaxTreeBuilder stb = new SyntaxTreeBuilder( new StringReader(query) );
                return stb.QueryContainer();
        }

        /**
	 * Parses the supplied SPARQL update sequence and builds a syntax tree from it.
	 *
	 * @param sequence A SPARQL update sequence string.
	 * @return The root of the syntax tree.
	 * @throws TokenMgrError If the update sequence was syntactically incorrect.
	 * @throws ParseException If the update sequence was syntactically incorrect.
	 */
        public static ASTUpdateSequence parseUpdateSequence(String sequence)
                throws TokenMgrError, ParseException
        {
                SyntaxTreeBuilder stb = new SyntaxTreeBuilder( new StringReader(sequence) );
                return stb.UpdateSequence();
        }

        /**
	 * Trims <tt>n</tt> character from the start and end of the supplied string.
	 */
        private static String _trimString(String s, int n) {
                if (s.length() >= 2 * n) {
                        s = s.substring(n, s.length() - n);
                }
                return s;
        }

        /**
	 * Append the image of the  provided token to the supplied StringBuilder.
	 * @param sb the StringBuilder to append to. May be null.
	 */
        private static void appendToken(StringBuilder sb, Token t) {
            if (sb != null) {
                sb.append(t.image);
                sb.append(" ");
            }
        }

//
// grammar
//
  final public ASTUpdateSequence UpdateSequence() throws ParseException {
 /*@bgen(jjtree) UpdateSequence */
  ASTUpdateSequence jjtn000 = new ASTUpdateSequence(JJTUPDATESEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UpdateContainer();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        UpdateContainer();
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTUpdateContainer UpdateContainer() throws ParseException {
 /*@bgen(jjtree) UpdateContainer */
  ASTUpdateContainer jjtn000 = new ASTUpdateContainer(JJTUPDATECONTAINER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Prolog();
      Update();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTQueryContainer QueryContainer() throws ParseException {
 /*@bgen(jjtree) QueryContainer */
  ASTQueryContainer jjtn000 = new ASTQueryContainer(JJTQUERYCONTAINER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Prolog();
      Query();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Prolog() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      BaseDecl();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      PrefixDecl();
    }
  }

  final public void BaseDecl() throws ParseException {
 /*@bgen(jjtree) BaseDecl */
  ASTBaseDecl jjtn000 = new ASTBaseDecl(JJTBASEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(BASE);
      t = jj_consume_token(Q_IRI_REF);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.setIRI(_trimString(t.image, 1));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PrefixDecl() throws ParseException {
 /*@bgen(jjtree) PrefixDecl */
  ASTPrefixDecl jjtn000 = new ASTPrefixDecl(JJTPREFIXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token prefix;
    try {
      jj_consume_token(PREFIX);
      prefix = jj_consume_token(PNAME_NS);
      IRI(null);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                // Remove trailing colon from prefix
                String prefixStr = prefix.image;
                prefixStr = prefixStr.substring(0, prefixStr.length() - 1);

                jjtn000.setPrefix(prefixStr);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Query() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      SelectQuery(null);
      break;
    case CONSTRUCT:
      ConstructQuery(null);
      break;
    case DESCRIBE:
      DescribeQuery(null);
      break;
    case ASK:
      AskQuery(null);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectQuery(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SelectQuery */
  ASTSelectQuery jjtn000 = new ASTSelectQuery(JJTSELECTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Select(sb);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        DatasetClause(sb);
      }
      WhereClause(sb);
      SolutionModifier(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINDINGS:
        BindingsClause(sb);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Select(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SELECT);
                       appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
      case REDUCED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DISTINCT:
          jj_consume_token(DISTINCT);
                            jjtn000.setDistinct(true); appendToken(sb, t);
          break;
        case REDUCED:
          jj_consume_token(REDUCED);
                           jjtn000.setReduced(true); appendToken(sb, t);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.setWildcard(true); appendToken(sb, t);
        break;
      case LPAREN:
      case VAR1:
      case VAR2:
        label_4:
        while (true) {
          ProjectionElem(sb);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case VAR1:
          case VAR2:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProjectionElem(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) ProjectionElem */
 ASTProjectionElem jjtn000 = new ASTProjectionElem(JJTPROJECTIONELEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR1:
      case VAR2:
        Var(sb);
        break;
      case LPAREN:
        LParen(sb);
        Expression(sb);
        t = jj_consume_token(AS);
                   appendToken(sb, t);
        Var(sb);
        RParen(sb);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConstructQuery(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) ConstructQuery */
  ASTConstructQuery jjtn000 = new ASTConstructQuery(JJTCONSTRUCTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Construct(sb);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        DatasetClause(sb);
      }
      WhereClause(sb);
      SolutionModifier(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINDINGS:
        BindingsClause(sb);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Construct(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Construct */
 ASTConstruct jjtn000 = new ASTConstruct(JJTCONSTRUCT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONSTRUCT);
                          appendToken(sb, t);
      if (jj_2_1(2)) {
        ConstructClause(sb);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConstructClause(StringBuilder sb) throws ParseException {
 Token t;
    // Note: replaced ConstructTriples ref with equivalent TriplesBlock ref
        t = jj_consume_token(LBRACE);
                   appendToken(sb, t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACK:
    case NIL:
    case ANON:
    case TRUE:
    case FALSE:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      TriplesBlock(sb);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    t = jj_consume_token(RBRACE);
                   appendToken(sb, t);
  }

  final public void DescribeQuery(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) DescribeQuery */
  ASTDescribeQuery jjtn000 = new ASTDescribeQuery(JJTDESCRIBEQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Describe(sb);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        DatasetClause(sb);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case WHERE:
        WhereClause(sb);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      SolutionModifier(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINDINGS:
        BindingsClause(sb);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Describe(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Describe */
 ASTDescribe jjtn000 = new ASTDescribe(JJTDESCRIBE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DESCRIBE);
                         appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             appendToken(sb, t); jjtn000.setWildcard(true);
        break;
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case VAR1:
      case VAR2:
        label_7:
        while (true) {
          VarOrIRIref(sb);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Q_IRI_REF:
          case PNAME_NS:
          case PNAME_LN:
          case VAR1:
          case VAR2:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_7;
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AskQuery(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) AskQuery */
 ASTAskQuery jjtn000 = new ASTAskQuery(JJTASKQUERY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASK);
                    appendToken(sb, t);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        DatasetClause(sb);
      }
      WhereClause(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINDINGS:
        BindingsClause(sb);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DatasetClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) DatasetClause */
  ASTDatasetClause jjtn000 = new ASTDatasetClause(JJTDATASETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FROM);
                     appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMED:
        t = jj_consume_token(NAMED);
                        appendToken(sb, t); jjtn000.setNamed(true);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      IRIref(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void WhereClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        t = jj_consume_token(WHERE);
                         appendToken(sb, t);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      GroupGraphPattern(sb);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void BindingsClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BindingsClause */
  ASTBindingsClause jjtn000 = new ASTBindingsClause(JJTBINDINGSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BINDINGS);
                     appendToken(sb, t);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR1:
        case VAR2:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        Var(sb);
      }
      t = jj_consume_token(LBRACE);
                   appendToken(sb, t);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case NIL:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_10;
        }
        BindingSet(sb);
      }
      t = jj_consume_token(RBRACE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   appendToken(sb, t);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BindingSet(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BindingSet */
  ASTBindingSet jjtn000 = new ASTBindingSet(JJTBINDINGSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        LParen(sb);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case UNDEF:
          case Q_IRI_REF:
          case PNAME_NS:
          case PNAME_LN:
          case INTEGER:
          case INTEGER_POSITIVE:
          case INTEGER_NEGATIVE:
          case DECIMAL:
          case DECIMAL_POSITIVE:
          case DECIMAL_NEGATIVE:
          case DOUBLE:
          case DOUBLE_POSITIVE:
          case DOUBLE_NEGATIVE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_11;
          }
          BindingValue(sb);
        }
        RParen(sb);
        break;
      case NIL:
        t = jj_consume_token(NIL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                appendToken(sb, t);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BindingValue(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BindingValue */
  ASTBindingValue jjtn000 = new ASTBindingValue(JJTBINDINGVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        IRIref(sb);
        break;
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        RDFLiteral(sb);
        break;
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
        NumericLiteral(sb);
        break;
      case TRUE:
      case FALSE:
        BooleanLiteral(sb);
        break;
      case UNDEF:
        t = jj_consume_token(UNDEF);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     appendToken(sb, t);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SolutionModifier(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      GroupClause(sb);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      HavingClause(sb);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      OrderClause(sb);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
    case OFFSET:
      LimitOffsetClauses(sb);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void GroupClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) GroupClause */
  ASTGroupClause jjtn000 = new ASTGroupClause(JJTGROUPCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GROUP);
                  appendToken(sb, t);
      t = jj_consume_token(BY);
              appendToken(sb, t);
      label_12:
      while (true) {
        GroupCondition(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case EXISTS:
        case NOT_EXISTS:
        case STR:
        case LANG:
        case LANGMATCHES:
        case DATATYPE:
        case BOUND:
        case SAMETERM:
        case IS_IRI:
        case IS_BLANK:
        case IS_LITERAL:
        case IS_NUMERIC:
        case COALESCE:
        case BNODE:
        case STRDT:
        case STRLANG:
        case IRI:
        case IF:
        case REGEX:
        case STRLEN:
        case SUBSTR:
        case STR_STARTS:
        case STR_ENDS:
        case UCASE:
        case LCASE:
        case CONCAT:
        case CONTAINS:
        case ENCODE_FOR_URI:
        case RAND:
        case ABS:
        case CEIL:
        case FLOOR:
        case ROUND:
        case NOW:
        case YEAR:
        case MONTH:
        case DAY:
        case HOURS:
        case MINUTES:
        case SECONDS:
        case TIMEZONE:
        case TZ:
        case MD5:
        case SHA1:
        case SHA224:
        case SHA256:
        case SHA384:
        case SHA512:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_12;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrderClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) OrderClause */
  ASTOrderClause jjtn000 = new ASTOrderClause(JJTORDERCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ORDER);
                      appendToken(sb, t);
      t = jj_consume_token(BY);
                   appendToken(sb, t);
      label_13:
      while (true) {
        OrderCondition(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case ASC:
        case DESC:
        case EXISTS:
        case NOT_EXISTS:
        case STR:
        case LANG:
        case LANGMATCHES:
        case DATATYPE:
        case BOUND:
        case SAMETERM:
        case IS_IRI:
        case IS_BLANK:
        case IS_LITERAL:
        case IS_NUMERIC:
        case COALESCE:
        case BNODE:
        case STRDT:
        case STRLANG:
        case IRI:
        case IF:
        case REGEX:
        case STRLEN:
        case SUBSTR:
        case STR_STARTS:
        case STR_ENDS:
        case UCASE:
        case LCASE:
        case CONCAT:
        case CONTAINS:
        case ENCODE_FOR_URI:
        case RAND:
        case ABS:
        case CEIL:
        case FLOOR:
        case ROUND:
        case NOW:
        case YEAR:
        case MONTH:
        case DAY:
        case HOURS:
        case MINUTES:
        case SECONDS:
        case TIMEZONE:
        case TZ:
        case MD5:
        case SHA1:
        case SHA224:
        case SHA256:
        case SHA384:
        case SHA512:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GroupCondition(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) GroupCondition */
  ASTGroupCondition jjtn000 = new ASTGroupCondition(JJTGROUPCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        FunctionCall(sb);
        break;
      case EXISTS:
      case NOT_EXISTS:
      case STR:
      case LANG:
      case LANGMATCHES:
      case DATATYPE:
      case BOUND:
      case SAMETERM:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case COALESCE:
      case BNODE:
      case STRDT:
      case STRLANG:
      case IRI:
      case IF:
      case REGEX:
      case STRLEN:
      case SUBSTR:
      case STR_STARTS:
      case STR_ENDS:
      case UCASE:
      case LCASE:
      case CONCAT:
      case CONTAINS:
      case ENCODE_FOR_URI:
      case RAND:
      case ABS:
      case CEIL:
      case FLOOR:
      case ROUND:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA224:
      case SHA256:
      case SHA384:
      case SHA512:
        BuiltInCall(sb);
        break;
      case LPAREN:
        LParen(sb);
        Expression(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          t = jj_consume_token(AS);
                                        appendToken(sb, t);
          Var(sb);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        RParen(sb);
        break;
      case VAR1:
      case VAR2:
        Var(sb);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void HavingClause(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) HavingClause */
 ASTHavingClause jjtn000 = new ASTHavingClause(JJTHAVINGCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HAVING);
                  appendToken(sb, t);
      Constraint(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrderCondition(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) OrderCondition */
  ASTOrderCondition jjtn000 = new ASTOrderCondition(JJTORDERCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASC:
            t = jj_consume_token(ASC);
            break;
          case DESC:
            t = jj_consume_token(DESC);
                          jjtn000.setAscending(false);
            break;
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
             appendToken(sb, t);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        BrackettedExpression(sb);
        break;
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        FunctionCall(sb);
        break;
      case EXISTS:
      case NOT_EXISTS:
      case STR:
      case LANG:
      case LANGMATCHES:
      case DATATYPE:
      case BOUND:
      case SAMETERM:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case COALESCE:
      case BNODE:
      case STRDT:
      case STRLANG:
      case IRI:
      case IF:
      case REGEX:
      case STRLEN:
      case SUBSTR:
      case STR_STARTS:
      case STR_ENDS:
      case UCASE:
      case LCASE:
      case CONCAT:
      case CONTAINS:
      case ENCODE_FOR_URI:
      case RAND:
      case ABS:
      case CEIL:
      case FLOOR:
      case ROUND:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA224:
      case SHA256:
      case SHA384:
      case SHA512:
        BuiltInCall(sb);
        break;
      case VAR1:
      case VAR2:
        Var(sb);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LimitOffsetClauses(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      Limit(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
        Offset(sb);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
    case OFFSET:
      Offset(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        Limit(sb);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Limit(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Limit */
  ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LIMIT);
                      appendToken(sb, t);
      t = jj_consume_token(INTEGER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.setValue(Long.parseLong(t.image)); appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Offset(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Offset */
  ASTOffset jjtn000 = new ASTOffset(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OFFSET);
                       appendToken(sb, t);
      t = jj_consume_token(INTEGER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.setValue(Long.parseLong(t.image)); appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GroupGraphPattern(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) GraphPatternGroup */
  ASTGraphPatternGroup jjtn000 = new ASTGraphPatternGroup(JJTGRAPHPATTERNGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LBRACE);
                       appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SelectQuery(sb);
        break;
      default:
        jj_la1[42] = jj_gen;
        GraphPattern(sb);
      }
      t = jj_consume_token(RBRACE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       appendToken(sb, t);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphPattern(StringBuilder sb) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACK:
    case NIL:
    case ANON:
    case FILTER:
    case TRUE:
    case FALSE:
    case BIND:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      BasicGraphPattern(sb);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case OPTIONAL:
    case GRAPH:
    case MINUS_SETOPER:
    case SERVICE:
      GraphPatternNotTriples(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        t = jj_consume_token(DOT);
                                                                          appendToken(sb, t);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      GraphPattern(sb);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final public void BasicGraphPattern(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BasicGraphPattern */
  ASTBasicGraphPattern jjtn000 = new ASTBasicGraphPattern(JJTBASICGRAPHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACK:
      case NIL:
      case ANON:
      case TRUE:
      case FALSE:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        TriplesBlock(sb);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FILTER:
          case BIND:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_14;
          }
          FilterOrBind(sb);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            t = jj_consume_token(DOT);
                                                        appendToken(sb, t);
            break;
          default:
            jj_la1[47] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case LBRACK:
          case NIL:
          case ANON:
          case TRUE:
          case FALSE:
          case Q_IRI_REF:
          case PNAME_NS:
          case PNAME_LN:
          case BLANK_NODE_LABEL:
          case VAR1:
          case VAR2:
          case INTEGER:
          case INTEGER_POSITIVE:
          case INTEGER_NEGATIVE:
          case DECIMAL:
          case DECIMAL_POSITIVE:
          case DECIMAL_NEGATIVE:
          case DOUBLE:
          case DOUBLE_POSITIVE:
          case DOUBLE_NEGATIVE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:
            TriplesBlock(sb);
            break;
          default:
            jj_la1[48] = jj_gen;
            ;
          }
        }
        break;
      case FILTER:
      case BIND:
        label_15:
        while (true) {
          FilterOrBind(sb);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            t = jj_consume_token(DOT);
                                       appendToken(sb, t);
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case LBRACK:
          case NIL:
          case ANON:
          case TRUE:
          case FALSE:
          case Q_IRI_REF:
          case PNAME_NS:
          case PNAME_LN:
          case BLANK_NODE_LABEL:
          case VAR1:
          case VAR2:
          case INTEGER:
          case INTEGER_POSITIVE:
          case INTEGER_NEGATIVE:
          case DECIMAL:
          case DECIMAL_POSITIVE:
          case DECIMAL_NEGATIVE:
          case DOUBLE:
          case DOUBLE_POSITIVE:
          case DOUBLE_NEGATIVE:
          case STRING_LITERAL1:
          case STRING_LITERAL2:
          case STRING_LITERAL_LONG1:
          case STRING_LITERAL_LONG2:
            TriplesBlock(sb);
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FILTER:
          case BIND:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_15;
          }
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FilterOrBind(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FILTER:
      Filter(sb);
      break;
    case BIND:
      Bind(sb);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TriplesBlock(StringBuilder sb) throws ParseException {
 Token t;
    TriplesSameSubjectPath(sb);
    label_16:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_16;
      }
      t = jj_consume_token(DOT);
                        appendToken(sb, t);
      TriplesSameSubjectPath(sb);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      t = jj_consume_token(DOT);
                     appendToken(sb, t);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
  }

  final public void TriplesTemplate(StringBuilder sb) throws ParseException {
 Token t;
    TriplesSameSubject(sb);
    label_17:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_17;
      }
      t = jj_consume_token(DOT);
                      appendToken(sb, t);
      TriplesSameSubject(sb);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      t = jj_consume_token(DOT);
                     appendToken(sb, t);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  }

  final public void GraphPatternNotTriples(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTIONAL:
      OptionalGraphPattern(sb);
      break;
    case LBRACE:
      GroupOrUnionGraphPattern(sb);
      break;
    case GRAPH:
      GraphGraphPattern(sb);
      break;
    case MINUS_SETOPER:
      MinusGraphPattern(sb);
      break;
    case SERVICE:
      ServiceGraphPattern(sb);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OptionalGraphPattern(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) OptionalGraphPattern */
 ASTOptionalGraphPattern jjtn000 = new ASTOptionalGraphPattern(JJTOPTIONALGRAPHPATTERN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      // Note: does not refer GroupGraphPattern(null) because constraints are not limited
              // to the optional graph pattern, but can also reference the operator's LHS
              t = jj_consume_token(OPTIONAL);
                         appendToken(sb, t);
      t = jj_consume_token(LBRACE);
                       appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SelectQuery(sb);
        break;
      default:
        jj_la1[57] = jj_gen;
        GraphPattern(sb);
      }
      t = jj_consume_token(RBRACE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       appendToken(sb, t);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphGraphPattern(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) GraphGraphPattern */
 ASTGraphGraphPattern jjtn000 = new ASTGraphGraphPattern(JJTGRAPHGRAPHPATTERN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GRAPH);
                      appendToken(sb, t);
      VarOrIRIref(sb);
      GroupGraphPattern(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GroupOrUnionGraphPattern(StringBuilder sb) throws ParseException {
 Token t;
    GroupGraphPattern(sb);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      t = jj_consume_token(UNION);
                          appendToken(sb, t);
              ASTUnionGraphPattern jjtn001 = new ASTUnionGraphPattern(JJTUNIONGRAPHPATTERN);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        GroupOrUnionGraphPattern(sb);
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
  }

  final public void MinusGraphPattern(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) MinusGraphPattern */
 ASTMinusGraphPattern jjtn000 = new ASTMinusGraphPattern(JJTMINUSGRAPHPATTERN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MINUS_SETOPER);
                         appendToken(sb, t);
      GroupGraphPattern(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ServiceGraphPattern(StringBuilder sbParent) throws ParseException {
 /*@bgen(jjtree) ServiceGraphPattern */
    ASTServiceGraphPattern jjtn000 = new ASTServiceGraphPattern(JJTSERVICEGRAPHPATTERN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);StringBuilder sb = new StringBuilder();
    Token t;
    String s;
    try {
      t = jj_consume_token(SERVICE);
                    appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        t = jj_consume_token(SILENT);
                    jjtn000.setSilent(true); appendToken(sb, t);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      VarOrIRIref(sb);
      GroupGraphPattern(sb);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setPatternString(sb.toString());
        if (sbParent != null) {
            sbParent.append(sb);
        }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Filter(StringBuilder sb) throws ParseException {
 Token t;
    t = jj_consume_token(FILTER);
                      appendToken(sb, t);
    Constraint(sb);
  }

  final public void Constraint(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        BrackettedExpression(sb);
        break;
      case EXISTS:
      case NOT_EXISTS:
      case STR:
      case LANG:
      case LANGMATCHES:
      case DATATYPE:
      case BOUND:
      case SAMETERM:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case COALESCE:
      case BNODE:
      case STRDT:
      case STRLANG:
      case IRI:
      case IF:
      case REGEX:
      case STRLEN:
      case SUBSTR:
      case STR_STARTS:
      case STR_ENDS:
      case UCASE:
      case LCASE:
      case CONCAT:
      case CONTAINS:
      case ENCODE_FOR_URI:
      case RAND:
      case ABS:
      case CEIL:
      case FLOOR:
      case ROUND:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA224:
      case SHA256:
      case SHA384:
      case SHA512:
        BuiltInCall(sb);
        break;
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        FunctionCall(sb);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionCall(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IRIref(sb);
      ArgList(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ArgList(StringBuilder sb) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      t = jj_consume_token(NIL);
                    appendToken(sb, t);
      break;
    case LPAREN:
      LParen(sb);
      Expression(sb);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_18;
        }
        t = jj_consume_token(COMMA);
                          appendToken(sb, t);
        Expression(sb);
      }
      RParen(sb);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TriplesSameSubject(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) TriplesSameSubject */
  ASTTriplesSameSubject jjtn000 = new ASTTriplesSameSubject(JJTTRIPLESSAMESUBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
      case ANON:
      case TRUE:
      case FALSE:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        VarOrTerm(sb);
        PropertyList(sb);
        break;
      case LPAREN:
      case LBRACK:
        TriplesNode(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_A:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          PropertyList(sb);
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertyList(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PropertyList */
 ASTPropertyList jjtn000 = new ASTPropertyList(JJTPROPERTYLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      Verb(sb);
      ObjectList(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
                             appendToken(sb, t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_A:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          PropertyList(sb);
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ObjectList(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) ObjectList */
 ASTObjectList jjtn000 = new ASTObjectList(JJTOBJECTLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      Object(sb);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_19;
        }
        t = jj_consume_token(COMMA);
                          appendToken(sb, t);
        Object(sb);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TriplesSameSubjectPath(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) TriplesSameSubjectPath */
  ASTTriplesSameSubjectPath jjtn000 = new ASTTriplesSameSubjectPath(JJTTRIPLESSAMESUBJECTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
      case ANON:
      case TRUE:
      case FALSE:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        VarOrTerm(sb);
        PropertyListPath(sb);
        break;
      case LPAREN:
      case LBRACK:
        TriplesNode(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case NOT:
        case INVERSE:
        case IS_A:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          PropertyListPath(sb);
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyListPath(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PropertyListPath */
 ASTPropertyListPath jjtn000 = new ASTPropertyListPath(JJTPROPERTYLISTPATH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case NOT:
      case INVERSE:
      case IS_A:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        VerbPath(sb);
        break;
      case VAR1:
      case VAR2:
        VerbSimple(sb);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ObjectList(sb);
      label_20:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_20;
        }
        t = jj_consume_token(SEMICOLON);
                          appendToken(sb, t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case NOT:
        case INVERSE:
        case IS_A:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case VAR1:
        case VAR2:
          PropertyListPath(sb);
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VerbPath(StringBuilder sb) throws ParseException {
    Path(sb);
  }

  final public void Path(StringBuilder sb) throws ParseException {
    PathAlternative(sb);
  }

  final public void PathAlternative(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PathAlternative */
  ASTPathAlternative jjtn000 = new ASTPathAlternative(JJTPATHALTERNATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      PathSequence(sb);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_21;
        }
        t = jj_consume_token(PIPE);
                     appendToken(sb, t);
        PathSequence(sb);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PathSequence(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PathSequence */
 ASTPathSequence jjtn000 = new ASTPathSequence(JJTPATHSEQUENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      PathElt(sb);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_22;
        }
        t = jj_consume_token(SLASH);
                      appendToken(sb, t);
        PathElt(sb);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PathElt(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PathElt */
 ASTPathElt jjtn000 = new ASTPathElt(JJTPATHELT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVERSE:
        t = jj_consume_token(INVERSE);
                     jjtn000.setInverse(true); appendToken(sb, t);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      PathPrimary(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case PLUS:
      case STAR:
      case QUESTION:
        PathMod(sb);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PathPrimary(StringBuilder sb) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref(sb);
      break;
    case IS_A:
      t = jj_consume_token(IS_A);
                 ASTIRI jjtn001 = new ASTIRI(JJTIRI);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                 appendToken(sb, t); jjtn001.setValue(RDF.TYPE.toString());
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case NOT:
      t = jj_consume_token(NOT);
                appendToken(sb, t);
      PathNegatedPropertySet(sb);
      break;
    case LPAREN:
      LParen(sb);
      Path(sb);
      t = jj_consume_token(RPAREN);
                 appendToken(sb, t);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PathNegatedPropertySet(StringBuilder sb) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVERSE:
    case IS_A:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      PathOneInPropertySet(sb);
      break;
    case LPAREN:
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVERSE:
      case IS_A:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        PathOneInPropertySet(sb);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PIPE:
            ;
            break;
          default:
            jj_la1[77] = jj_gen;
            break label_23;
          }
          t = jj_consume_token(PIPE);
                        appendToken(sb, t);
          PathOneInPropertySet(sb);
        }
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      RParen(sb);
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PathOneInPropertySet(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PathOneInPropertySet */
 ASTPathOneInPropertySet jjtn000 = new ASTPathOneInPropertySet(JJTPATHONEINPROPERTYSET);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        IRIref(sb);
        break;
      case IS_A:
        t = jj_consume_token(IS_A);
                 ASTIRI jjtn001 = new ASTIRI(JJTIRI);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                 appendToken(sb, t); jjtn001.setValue(RDF.TYPE.toString());
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
        }
        break;
      case INVERSE:
        t = jj_consume_token(INVERSE);
                    appendToken(sb, t); jjtn000.setInverse(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
          IRIref(sb);
          break;
        case IS_A:
          t = jj_consume_token(IS_A);
                     ASTIRI jjtn002 = new ASTIRI(JJTIRI);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
          try {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     appendToken(sb, t); jjtn002.setValue(RDF.TYPE.toString());
          } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
          }
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PathMod(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) PathMod */
  ASTPathMod jjtn000 = new ASTPathMod(JJTPATHMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token min;
  Token max;
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setLowerBound(0);
        jjtn000.setUpperBound(Long.MAX_VALUE);
        appendToken(sb, t);
        break;
      case QUESTION:
        t = jj_consume_token(QUESTION);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setLowerBound(0);
        jjtn000.setUpperBound(1);
        appendToken(sb, t);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setLowerBound(1);
        jjtn000.setUpperBound(Long.MAX_VALUE);
        appendToken(sb, t);
        break;
      case LBRACE:
        t = jj_consume_token(LBRACE);
                  appendToken(sb, t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          min = jj_consume_token(INTEGER);
            jjtn000.setLowerBound(Long.parseLong(min.image));
            appendToken(sb, min);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            t = jj_consume_token(COMMA);
                         appendToken(sb, t);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RBRACE:
              t = jj_consume_token(RBRACE);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              appendToken(sb, t);
              break;
            case INTEGER:
              max = jj_consume_token(INTEGER);
                    jjtn000.setUpperBound(Long.parseLong(max.image));
                    appendToken(sb, max);
              t = jj_consume_token(RBRACE);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              appendToken(sb, t);
              break;
            default:
              jj_la1[82] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case RBRACE:
            t = jj_consume_token(RBRACE);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          appendToken(sb, t);
            break;
          default:
            jj_la1[83] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case COMMA:
          t = jj_consume_token(COMMA);
                     appendToken(sb, t);
          max = jj_consume_token(INTEGER);
            jjtn000.setUpperBound(Long.parseLong(max.image));
            appendToken(sb, max);
          t = jj_consume_token(RBRACE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      appendToken(sb, t);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VerbSimple(StringBuilder sb) throws ParseException {
    Var(sb);
  }

  final public void Object(StringBuilder sb) throws ParseException {
    GraphNode(sb);
  }

  final public void Verb(StringBuilder sb) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR1:
    case VAR2:
      VarOrIRIref(sb);
      break;
    case IS_A:
      t = jj_consume_token(IS_A);
                     ASTIRI jjtn001 = new ASTIRI(JJTIRI);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     appendToken(sb, t); jjtn001.setValue(RDF.TYPE.toString());
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TriplesNode(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Collection(sb);
      break;
    case LBRACK:
      BlankNodePropertyList(sb);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BlankNodePropertyList(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BlankNodePropertyList */
  ASTBlankNodePropertyList jjtn000 = new ASTBlankNodePropertyList(JJTBLANKNODEPROPERTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LBRACK);
                      appendToken(sb, t);
      PropertyList(sb);
      t = jj_consume_token(RBRACK);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      appendToken(sb, t);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Collection(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Collection */
  ASTCollection jjtn000 = new ASTCollection(JJTCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      LParen(sb);
      label_24:
      while (true) {
        GraphNode(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACK:
        case NIL:
        case ANON:
        case TRUE:
        case FALSE:
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
        case BLANK_NODE_LABEL:
        case VAR1:
        case VAR2:
        case INTEGER:
        case INTEGER_POSITIVE:
        case INTEGER_NEGATIVE:
        case DECIMAL:
        case DECIMAL_POSITIVE:
        case DECIMAL_NEGATIVE:
        case DOUBLE:
        case DOUBLE_POSITIVE:
        case DOUBLE_NEGATIVE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_24;
        }
      }
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphNode(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
    case ANON:
    case TRUE:
    case FALSE:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      VarOrTerm(sb);
      break;
    case LPAREN:
    case LBRACK:
      TriplesNode(sb);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarOrTerm(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      Var(sb);
      break;
    case NIL:
    case ANON:
    case TRUE:
    case FALSE:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      GraphTerm(sb);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarOrIRIref(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      Var(sb);
      break;
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref(sb);
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Var(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR1:
        t = jj_consume_token(VAR1);
        break;
      case VAR2:
        t = jj_consume_token(VAR2);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image.substring(1));
          appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphTerm(StringBuilder sb) throws ParseException {
        Token t;
        boolean positive = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
      IRIref(sb);
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      RDFLiteral(sb);
      break;
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
      NumericLiteral(sb);
      break;
    case TRUE:
    case FALSE:
      BooleanLiteral(sb);
      break;
    case ANON:
    case BLANK_NODE_LABEL:
      BlankNode(sb);
      break;
    case NIL:
      t = jj_consume_token(NIL);
          ASTIRI jjtn001 = new ASTIRI(JJTIRI);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
            appendToken(sb, t);
            jjtn001.setValue(RDF.NIL.toString());
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression(StringBuilder sb) throws ParseException {
    ConditionalOrExpression(sb);
  }

  final public void ConditionalOrExpression(StringBuilder sb) throws ParseException {
 Token t;
    ConditionalAndExpression(sb);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
                       appendToken(sb, t);
              ASTOr jjtn001 = new ASTOr(JJTOR);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        ConditionalOrExpression(sb);
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
      }
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
  }

  final public void ConditionalAndExpression(StringBuilder sb) throws ParseException {
 Token t;
    ValueLogical(sb);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
                        appendToken(sb, t);
              ASTAnd jjtn001 = new ASTAnd(JJTAND);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression(sb);
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
  }

  final public void ValueLogical(StringBuilder sb) throws ParseException {
    RelationalExpression(sb);
  }

  final public void RelationalExpression(StringBuilder sb) throws ParseException {
 Token t;
    NumericExpression(sb);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
    case GT:
    case LT:
    case LE:
    case GE:
    case IN:
    case NOT_IN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn001 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtc001 = false;
                                       jjtn001.setOperator(CompareOp.EQ);
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
        }
        break;
      case NE:
        t = jj_consume_token(NE);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn002 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                        jjtc002 = false;
                                       jjtn002.setOperator(CompareOp.NE);
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case LT:
        t = jj_consume_token(LT);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn003 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
                                        jjtree.closeNodeScope(jjtn003,  2);
                                        jjtc003 = false;
                                       jjtn003.setOperator(CompareOp.LT);
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      case LE:
        t = jj_consume_token(LE);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn004 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
        try {
                                        jjtree.closeNodeScope(jjtn004,  2);
                                        jjtc004 = false;
                                       jjtn004.setOperator(CompareOp.LE);
        } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
        }
        break;
      case GE:
        t = jj_consume_token(GE);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn005 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
        try {
                                        jjtree.closeNodeScope(jjtn005,  2);
                                        jjtc005 = false;
                                       jjtn005.setOperator(CompareOp.GE);
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
        }
        break;
      case GT:
        t = jj_consume_token(GT);
                          appendToken(sb, t);
        NumericExpression(sb);
                                        ASTCompare jjtn006 = new ASTCompare(JJTCOMPARE);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
        try {
                                        jjtree.closeNodeScope(jjtn006,  2);
                                        jjtc006 = false;
                                       jjtn006.setOperator(CompareOp.GT);
        } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
        }
        break;
      case IN:
                  ASTInfix jjtn007 = new ASTInfix(JJTINFIX);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
        try {
          In(sb);
        } catch (Throwable jjte007) {
                  if (jjtc007) {
                    jjtree.clearNodeScope(jjtn007);
                    jjtc007 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte007 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte007;}
                  }
                  if (jjte007 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte007;}
                  }
                  {if (true) throw (Error)jjte007;}
        } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007,  2);
                  }
        }
        break;
      case NOT_IN:
                  ASTInfix jjtn008 = new ASTInfix(JJTINFIX);
                  boolean jjtc008 = true;
                  jjtree.openNodeScope(jjtn008);
        try {
          NotIn(sb);
        } catch (Throwable jjte008) {
                  if (jjtc008) {
                    jjtree.clearNodeScope(jjtn008);
                    jjtc008 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte008 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte008;}
                  }
                  if (jjte008 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte008;}
                  }
                  {if (true) throw (Error)jjte008;}
        } finally {
                  if (jjtc008) {
                    jjtree.closeNodeScope(jjtn008,  2);
                  }
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
  }

  final public void NumericExpression(StringBuilder sb) throws ParseException {
    AdditiveExpression(sb);
  }

  final public void AdditiveExpression(StringBuilder sb) throws ParseException {
  Token t;
    MultiplicativeExpression(sb);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                      appendToken(sb, t);
        MultiplicativeExpression(sb);
                                         ASTMath jjtn001 = new ASTMath(JJTMATH);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                        jjtn001.setOperator(MathOp.PLUS);
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                      appendToken(sb, t);
        MultiplicativeExpression(sb);
                                         ASTMath jjtn002 = new ASTMath(JJTMATH);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                         jjtc002 = false;
                                        jjtn002.setOperator(MathOp.MINUS);
        } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
        }
        break;
      case INTEGER_POSITIVE:
      case DECIMAL_POSITIVE:
      case DOUBLE_POSITIVE:
        NumericLiteralPositive(sb);
                                       ASTMath jjtn003 = new ASTMath(JJTMATH);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
        try {
                                       jjtree.closeNodeScope(jjtn003,  2);
                                       jjtc003 = false;
                                      jjtn003.setOperator(MathOp.PLUS);
        } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
        }
        break;
      case INTEGER_NEGATIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE_NEGATIVE:
        NumericLiteralNegative(sb);
                                       ASTMath jjtn004 = new ASTMath(JJTMATH);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
        try {
                                       jjtree.closeNodeScope(jjtn004,  2);
                                       jjtc004 = false;
                                      jjtn004.setOperator(MathOp.PLUS);
        } finally {
                                       if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  2);
                                       }
        }
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression(StringBuilder sb) throws ParseException {
  Token t;
    UnaryExpression(sb);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
                      appendToken(sb, t);
        UnaryExpression(sb);
                                ASTMath jjtn001 = new ASTMath(JJTMATH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
        try {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
                               jjtn001.setOperator(MathOp.MULTIPLY);
        } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
        }
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
                       appendToken(sb, t);
        UnaryExpression(sb);
                                ASTMath jjtn002 = new ASTMath(JJTMATH);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
        try {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
                               jjtn002.setOperator(MathOp.DIVIDE);
        } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
        }
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression(StringBuilder sb) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
                    appendToken(sb, t);
          ASTNot jjtn001 = new ASTNot(JJTNOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        PrimaryExpression(sb);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case LPAREN:
    case PLUS:
    case EXISTS:
    case NOT_EXISTS:
    case STR:
    case LANG:
    case LANGMATCHES:
    case DATATYPE:
    case BOUND:
    case SAMETERM:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case COALESCE:
    case BNODE:
    case STRDT:
    case STRLANG:
    case IRI:
    case IF:
    case COUNT:
    case SUM:
    case MIN:
    case MAX:
    case AVG:
    case SAMPLE:
    case GROUP_CONCAT:
    case REGEX:
    case TRUE:
    case FALSE:
    case STRLEN:
    case SUBSTR:
    case STR_STARTS:
    case STR_ENDS:
    case UCASE:
    case LCASE:
    case CONCAT:
    case CONTAINS:
    case ENCODE_FOR_URI:
    case RAND:
    case ABS:
    case CEIL:
    case FLOOR:
    case ROUND:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA224:
    case SHA256:
    case SHA384:
    case SHA512:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case VAR1:
    case VAR2:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                     appendToken(sb, t);
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      PrimaryExpression(sb);
      break;
    case MINUS:
      UnaryMinus(sb);
      PrimaryExpression(sb);
                                               ASTMath jjtn002 = new ASTMath(JJTMATH);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
      try {
                                               jjtree.closeNodeScope(jjtn002,  2);
                                               jjtc002 = false;
                                              jjtn002.setOperator(MathOp.MULTIPLY);
      } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                               }
      }
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryMinus(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MINUS);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                appendToken(sb, t);
                jjtn000.setValue("-1");
                jjtn000.setDatatype(XMLSchema.INTEGER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PrimaryExpression(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      BrackettedExpression(sb);
      break;
    case EXISTS:
    case NOT_EXISTS:
    case STR:
    case LANG:
    case LANGMATCHES:
    case DATATYPE:
    case BOUND:
    case SAMETERM:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case COALESCE:
    case BNODE:
    case STRDT:
    case STRLANG:
    case IRI:
    case IF:
    case REGEX:
    case STRLEN:
    case SUBSTR:
    case STR_STARTS:
    case STR_ENDS:
    case UCASE:
    case LCASE:
    case CONCAT:
    case CONTAINS:
    case ENCODE_FOR_URI:
    case RAND:
    case ABS:
    case CEIL:
    case FLOOR:
    case ROUND:
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
    case MD5:
    case SHA1:
    case SHA224:
    case SHA256:
    case SHA384:
    case SHA512:
      BuiltInCall(sb);
      break;
    default:
      jj_la1[104] = jj_gen;
      if (jj_2_5(2)) {
        FunctionCall(sb);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Q_IRI_REF:
        case PNAME_NS:
        case PNAME_LN:
          IRIref(sb);
          break;
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
          RDFLiteral(sb);
          break;
        case INTEGER:
        case INTEGER_POSITIVE:
        case INTEGER_NEGATIVE:
        case DECIMAL:
        case DECIMAL_POSITIVE:
        case DECIMAL_NEGATIVE:
        case DOUBLE:
        case DOUBLE_POSITIVE:
        case DOUBLE_NEGATIVE:
          NumericLiteral(sb);
          break;
        case TRUE:
        case FALSE:
          BooleanLiteral(sb);
          break;
        case VAR1:
        case VAR2:
          Var(sb);
          break;
        case COUNT:
        case SUM:
        case MIN:
        case MAX:
        case AVG:
        case SAMPLE:
        case GROUP_CONCAT:
          Aggregate(sb);
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Aggregate(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      Count(sb);
      break;
    case SUM:
      Sum(sb);
      break;
    case MIN:
      Min(sb);
      break;
    case MAX:
      Max(sb);
      break;
    case AVG:
      Avg(sb);
      break;
    case SAMPLE:
      Sample(sb);
      break;
    case GROUP_CONCAT:
      GroupConcat(sb);
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Count(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Count */
 ASTCount jjtn000 = new ASTCount(JJTCOUNT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COUNT);
                  appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
                         appendToken(sb, t); jjtn000.setWildcard(true);
        break;
      case LPAREN:
      case NOT:
      case PLUS:
      case MINUS:
      case EXISTS:
      case NOT_EXISTS:
      case STR:
      case LANG:
      case LANGMATCHES:
      case DATATYPE:
      case BOUND:
      case SAMETERM:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case IS_NUMERIC:
      case COALESCE:
      case BNODE:
      case STRDT:
      case STRLANG:
      case IRI:
      case IF:
      case COUNT:
      case SUM:
      case MIN:
      case MAX:
      case AVG:
      case SAMPLE:
      case GROUP_CONCAT:
      case REGEX:
      case TRUE:
      case FALSE:
      case STRLEN:
      case SUBSTR:
      case STR_STARTS:
      case STR_ENDS:
      case UCASE:
      case LCASE:
      case CONCAT:
      case CONTAINS:
      case ENCODE_FOR_URI:
      case RAND:
      case ABS:
      case CEIL:
      case FLOOR:
      case ROUND:
      case NOW:
      case YEAR:
      case MONTH:
      case DAY:
      case HOURS:
      case MINUTES:
      case SECONDS:
      case TIMEZONE:
      case TZ:
      case MD5:
      case SHA1:
      case SHA224:
      case SHA256:
      case SHA384:
      case SHA512:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        Expression(sb);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LParen(StringBuilder sb) throws ParseException {
  Token t;
    t = jj_consume_token(LPAREN);
                   appendToken(sb, t);
  }

  final public void RParen(StringBuilder sb) throws ParseException {
  Token t;
    t = jj_consume_token(RPAREN);
                   appendToken(sb, t);
  }

  final public void Sum(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Sum */
 ASTSum jjtn000 = new ASTSum(JJTSUM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUM);
               appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Min(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Min */
 ASTMin jjtn000 = new ASTMin(JJTMIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MIN);
               appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Max(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Max */
 ASTMax jjtn000 = new ASTMax(JJTMAX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAX);
                appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Avg(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Avg */
 ASTAvg jjtn000 = new ASTAvg(JJTAVG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(AVG);
               appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Sample(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Sample */
 ASTSample jjtn000 = new ASTSample(JJTSAMPLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SAMPLE);
                  appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GroupConcat(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) GroupConcat */
 ASTGroupConcat jjtn000 = new ASTGroupConcat(JJTGROUPCONCAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GROUP_CONCAT);
                        appendToken(sb, t);
      LParen(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        t = jj_consume_token(DISTINCT);
                           appendToken(sb, t); jjtn000.setDistinct(true);
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      Expression(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
                              appendToken(sb, t);
        t = jj_consume_token(SEPARATOR);
                              appendToken(sb, t);
        t = jj_consume_token(EQ);
                      appendToken(sb, t);
        Expression(sb);
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BrackettedExpression(StringBuilder sb) throws ParseException {
    LParen(sb);
    Expression(sb);
    RParen(sb);
  }

  final public void BuiltInCall(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOUND:
      Bound(sb);
      break;
    case SAMETERM:
      SameTerm(sb);
      break;
    case EXISTS:
      ExistsFunc(sb);
      break;
    case NOT_EXISTS:
      NotExistsFunc(sb);
      break;
    case COALESCE:
      Coalesce(sb);
      break;
    case IF:
      If(sb);
      break;
    case LANGMATCHES:
    case REGEX:
    case STRLEN:
    case SUBSTR:
    case STR_STARTS:
    case STR_ENDS:
    case UCASE:
    case LCASE:
    case CONCAT:
    case CONTAINS:
    case ENCODE_FOR_URI:
      StringFunction(sb);
      break;
    case RAND:
    case ABS:
    case CEIL:
    case FLOOR:
    case ROUND:
      NumericFunction(sb);
      break;
    case STR:
    case LANG:
    case DATATYPE:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case IS_NUMERIC:
    case BNODE:
    case STRDT:
    case STRLANG:
    case IRI:
      RDFTermFunction(sb);
      break;
    case NOW:
    case YEAR:
    case MONTH:
    case DAY:
    case HOURS:
    case MINUTES:
    case SECONDS:
    case TIMEZONE:
    case TZ:
      DateTimeFunction(sb);
      break;
    case MD5:
    case SHA1:
    case SHA224:
    case SHA256:
    case SHA384:
    case SHA512:
      HashFunction(sb);
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StringFunction(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBSTR:
      Substr(sb);
      break;
    case STRLEN:
      StrLen(sb);
      break;
    case UCASE:
      UpperCase(sb);
      break;
    case LCASE:
      LowerCase(sb);
      break;
    case STR_STARTS:
      StrStarts(sb);
      break;
    case STR_ENDS:
      StrEnds(sb);
      break;
    case CONCAT:
      Concat(sb);
      break;
    case CONTAINS:
      Contains(sb);
      break;
    case ENCODE_FOR_URI:
      EncodeForURI(sb);
      break;
    case LANGMATCHES:
      LangMatches(sb);
      break;
    case REGEX:
      RegexExpression(sb);
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericFunction(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RAND:
      Rand(sb);
      break;
    case ABS:
      Abs(sb);
      break;
    case CEIL:
      Ceil(sb);
      break;
    case FLOOR:
      Floor(sb);
      break;
    case ROUND:
      Round(sb);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RDFTermFunction(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_IRI:
      IsIRI(sb);
      break;
    case IS_BLANK:
      IsBlank(sb);
      break;
    case IS_LITERAL:
      IsLiteral(sb);
      break;
    case IS_NUMERIC:
      IsNumeric(sb);
      break;
    case BNODE:
      BNodeFunc(sb);
      break;
    case IRI:
      IRIFunc(sb);
      break;
    case LANG:
      Lang(sb);
      break;
    case DATATYPE:
      Datatype(sb);
      break;
    case STR:
      Str(sb);
      break;
    case STRDT:
      StrDt(sb);
      break;
    case STRLANG:
      StrLang(sb);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DateTimeFunction(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOW:
      Now(sb);
      break;
    case YEAR:
      Year(sb);
      break;
    case MONTH:
      Month(sb);
      break;
    case DAY:
      Day(sb);
      break;
    case HOURS:
      Hours(sb);
      break;
    case MINUTES:
      Minutes(sb);
      break;
    case SECONDS:
      Seconds(sb);
      break;
    case TIMEZONE:
      Timezone(sb);
      break;
    case TZ:
      Tz(sb);
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void HashFunction(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MD5:
      MD5(sb);
      break;
    case SHA1:
      SHA1(sb);
      break;
    case SHA224:
      SHA224(sb);
      break;
    case SHA256:
      SHA256(sb);
      break;
    case SHA384:
      SHA384(sb);
      break;
    case SHA512:
      SHA512(sb);
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MD5(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) MD5 */
 ASTMD5 jjtn000 = new ASTMD5(JJTMD5);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MD5);
                appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SHA1(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SHA1 */
 ASTSHA1 jjtn000 = new ASTSHA1(JJTSHA1);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHA1);
                 appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SHA224(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SHA224 */
 ASTSHA224 jjtn000 = new ASTSHA224(JJTSHA224);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHA224);
                   appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SHA256(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SHA256 */
 ASTSHA256 jjtn000 = new ASTSHA256(JJTSHA256);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHA256);
                   appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SHA384(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SHA384 */
 ASTSHA384 jjtn000 = new ASTSHA384(JJTSHA384);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHA384);
                   appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SHA512(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SHA512 */
 ASTSHA512 jjtn000 = new ASTSHA512(JJTSHA512);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHA512);
                   appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Now(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Now */
 ASTNow jjtn000 = new ASTNow(JJTNOW);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOW);
                appendToken(sb, t);
      t = jj_consume_token(NIL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                appendToken(sb, t);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Year(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Year */
 ASTYear jjtn000 = new ASTYear(JJTYEAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(YEAR);
                 appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Month(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Month */
 ASTMonth jjtn000 = new ASTMonth(JJTMONTH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MONTH);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Day(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Day */
 ASTDay jjtn000 = new ASTDay(JJTDAY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DAY);
                appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Hours(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Hours */
 ASTHours jjtn000 = new ASTHours(JJTHOURS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HOURS);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Minutes(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Minutes */
 ASTMinutes jjtn000 = new ASTMinutes(JJTMINUTES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MINUTES);
                    appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Seconds(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Seconds */
 ASTSeconds jjtn000 = new ASTSeconds(JJTSECONDS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SECONDS);
                    appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Timezone(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Timezone */
 ASTTimezone jjtn000 = new ASTTimezone(JJTTIMEZONE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TIMEZONE);
                     appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Tz(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Tz */
 ASTTz jjtn000 = new ASTTz(JJTTZ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TZ);
               appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Rand(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Rand */
 ASTRand jjtn000 = new ASTRand(JJTRAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RAND);
                appendToken(sb, t);
      t = jj_consume_token(NIL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                appendToken(sb, t);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Abs(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Abs */
 ASTAbs jjtn000 = new ASTAbs(JJTABS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ABS);
                appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Ceil(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Ceil */
 ASTCeil jjtn000 = new ASTCeil(JJTCEIL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CEIL);
                 appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Floor(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Floor */
 ASTFloor jjtn000 = new ASTFloor(JJTFLOOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOOR);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Round(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Round */
 ASTRound jjtn000 = new ASTRound(JJTROUND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ROUND);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Substr(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Substr */
 ASTSubstr jjtn000 = new ASTSubstr(JJTSUBSTR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUBSTR);
                   appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      t = jj_consume_token(COMMA);
                      appendToken(sb, t);
      Expression(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        t = jj_consume_token(COMMA);
                          appendToken(sb, t);
        Expression(sb);
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StrLen(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) StrLen */
 ASTStrLen jjtn000 = new ASTStrLen(JJTSTRLEN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRLEN);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UpperCase(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) UpperCase */
 ASTUpperCase jjtn000 = new ASTUpperCase(JJTUPPERCASE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(UCASE);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LowerCase(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) LowerCase */
 ASTLowerCase jjtn000 = new ASTLowerCase(JJTLOWERCASE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LCASE);
                  appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StrStarts(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) StrStarts */
 ASTStrStarts jjtn000 = new ASTStrStarts(JJTSTRSTARTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STR_STARTS);
                       appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      t = jj_consume_token(COMMA);
                      appendToken(sb, t);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StrEnds(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) StrEnds */
 ASTStrEnds jjtn000 = new ASTStrEnds(JJTSTRENDS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STR_ENDS);
                     appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      t = jj_consume_token(COMMA);
                      appendToken(sb, t);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Concat(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Concat */
 ASTConcat jjtn000 = new ASTConcat(JJTCONCAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONCAT);
                   appendToken(sb, t);
      ArgList(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Contains(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Contains */
 ASTContains jjtn000 = new ASTContains(JJTCONTAINS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONTAINS);
                     appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      t = jj_consume_token(COMMA);
                      appendToken(sb, t);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EncodeForURI(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) EncodeForURI */
 ASTEncodeForURI jjtn000 = new ASTEncodeForURI(JJTENCODEFORURI);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ENCODE_FOR_URI);
                           appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Comma(StringBuilder sb) throws ParseException {
 Token t;
    t = jj_consume_token(COMMA);
                  appendToken(sb, t);
  }

  final public void If(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) If */
 ASTIf jjtn000 = new ASTIf(JJTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IF);
               appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void In(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) In */
 ASTIn jjtn000 = new ASTIn(JJTIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IN);
               appendToken(sb, t);
      ArgList(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NotIn(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NotIn */
 ASTNotIn jjtn000 = new ASTNotIn(JJTNOTIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT_IN);
                   appendToken(sb, t);
      ArgList(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Coalesce(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Coalesce */
 ASTCoalesce jjtn000 = new ASTCoalesce(JJTCOALESCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COALESCE);
                     appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_27;
        }
        Comma(sb);
        Expression(sb);
      }
      RParen(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Str(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Str */
 ASTStr jjtn000 = new ASTStr(JJTSTR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STR);
                    appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Lang(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Lang */
 ASTLang jjtn000 = new ASTLang(JJTLANG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LANG);
                     appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LangMatches(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) LangMatches */
 ASTLangMatches jjtn000 = new ASTLangMatches(JJTLANGMATCHES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LANGMATCHES);
                            appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Datatype(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Datatype */
 ASTDatatype jjtn000 = new ASTDatatype(JJTDATATYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DATATYPE);
                         appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Bound(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Bound */
 ASTBound jjtn000 = new ASTBound(JJTBOUND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOUND);
                      appendToken(sb, t);
      LParen(sb);
      Var(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SameTerm(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SameTerm */
 ASTSameTerm jjtn000 = new ASTSameTerm(JJTSAMETERM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SAMETERM);
                         appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IsIRI(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IsIRI */
 ASTIsIRI jjtn000 = new ASTIsIRI(JJTISIRI);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_IRI);
                       appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IsBlank(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IsBlank */
 ASTIsBlank jjtn000 = new ASTIsBlank(JJTISBLANK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_BLANK);
                         appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IsLiteral(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IsLiteral */
 ASTIsLiteral jjtn000 = new ASTIsLiteral(JJTISLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_LITERAL);
                           appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IsNumeric(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IsNumeric */
 ASTIsNumeric jjtn000 = new ASTIsNumeric(JJTISNUMERIC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_NUMERIC);
                           appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BNodeFunc(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BNodeFunc */
 ASTBNodeFunc jjtn000 = new ASTBNodeFunc(JJTBNODEFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BNODE);
                      appendToken(sb, t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
        t = jj_consume_token(NIL);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         appendToken(sb, t);
        break;
      case LPAREN:
        LParen(sb);
        Expression(sb);
        RParen(sb);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IRIFunc(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IRIFunc */
 ASTIRIFunc jjtn000 = new ASTIRIFunc(JJTIRIFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IRI);
                    appendToken(sb, t);
      BrackettedExpression(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StrDt(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) StrDt */
 ASTStrDt jjtn000 = new ASTStrDt(JJTSTRDT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRDT);
                      appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StrLang(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) StrLang */
 ASTStrLang jjtn000 = new ASTStrLang(JJTSTRLANG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRLANG);
                        appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Bind(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) Bind */
 ASTBind jjtn000 = new ASTBind(JJTBIND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BIND);
                     appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      t = jj_consume_token(AS);
                       appendToken(sb, t);
      Var(sb);
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RegexExpression(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) RegexExpression */
 ASTRegexExpression jjtn000 = new ASTRegexExpression(JJTREGEXEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REGEX);
                      appendToken(sb, t);
      LParen(sb);
      Expression(sb);
      Comma(sb);
      Expression(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        Comma(sb);
        Expression(sb);
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      RParen(sb);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ExistsFunc(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) ExistsFunc */
 ASTExistsFunc jjtn000 = new ASTExistsFunc(JJTEXISTSFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EXISTS);
                   appendToken(sb, t);
      GroupGraphPattern(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NotExistsFunc(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NotExistsFunc */
 ASTNotExistsFunc jjtn000 = new ASTNotExistsFunc(JJTNOTEXISTSFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT_EXISTS);
                       appendToken(sb, t);
      GroupGraphPattern(sb);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RDFLiteral(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) RDFLiteral */
  ASTRDFLiteral jjtn000 = new ASTRDFLiteral(JJTRDFLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      String(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DT_PREFIX:
      case LANGTAG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LANGTAG:
          t = jj_consume_token(LANGTAG);
                               appendToken(sb, t); jjtn000.setLang(t.image.substring(1));
          break;
        case DT_PREFIX:
          t = jj_consume_token(DT_PREFIX);
                                 appendToken(sb, t);
          IRIref(sb);
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteral(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
      NumericLiteralUnsigned(sb);
      break;
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:
      NumericLiteralPositive(sb);
      break;
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:
      NumericLiteralNegative(sb);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralUnsigned(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; URI datatype;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                datatype = XMLSchema.INTEGER;
        break;
      case DECIMAL:
        t = jj_consume_token(DECIMAL);
                                datatype = XMLSchema.DECIMAL;
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                               datatype = XMLSchema.DOUBLE;
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setValue(t.image);
                jjtn000.setDatatype(datatype);
                appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteralPositive(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; URI datatype;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_POSITIVE:
        t = jj_consume_token(INTEGER_POSITIVE);
                                         datatype = XMLSchema.INTEGER;
        break;
      case DECIMAL_POSITIVE:
        t = jj_consume_token(DECIMAL_POSITIVE);
                                         datatype = XMLSchema.DECIMAL;
        break;
      case DOUBLE_POSITIVE:
        t = jj_consume_token(DOUBLE_POSITIVE);
                                        datatype = XMLSchema.DOUBLE;
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setValue(t.image);
                jjtn000.setDatatype(datatype);
                appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumericLiteralNegative(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; URI datatype;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_NEGATIVE:
        t = jj_consume_token(INTEGER_NEGATIVE);
                                         datatype = XMLSchema.INTEGER;
        break;
      case DECIMAL_NEGATIVE:
        t = jj_consume_token(DECIMAL_NEGATIVE);
                                         datatype = XMLSchema.DECIMAL;
        break;
      case DOUBLE_NEGATIVE:
        t = jj_consume_token(DOUBLE_NEGATIVE);
                                        datatype = XMLSchema.DOUBLE;
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setValue(t.image);
                jjtn000.setDatatype(datatype);
                appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BooleanLiteral(StringBuilder sb) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
          ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(TRUE);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case FALSE:
          ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(FALSE);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      appendToken(sb, t);
  }

  final public void String(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL1:
      case STRING_LITERAL2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL1:
          t = jj_consume_token(STRING_LITERAL1);
          break;
        case STRING_LITERAL2:
          t = jj_consume_token(STRING_LITERAL2);
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setValue(_trimString(t.image, 1)); appendToken(sb, t);
        break;
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL_LONG1:
          t = jj_consume_token(STRING_LITERAL_LONG1);
          break;
        case STRING_LITERAL_LONG2:
          t = jj_consume_token(STRING_LITERAL_LONG2);
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setValue(_trimString(t.image, 3)); appendToken(sb, t);
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IRIref(StringBuilder sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRI_REF:
      IRI(sb);
      break;
    case PNAME_NS:
    case PNAME_LN:
      PrefixedName(sb);
      break;
    default:
      jj_la1[136] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrefixedName(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) QName */
  ASTQName jjtn000 = new ASTQName(JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PNAME_LN:
        t = jj_consume_token(PNAME_LN);
        break;
      case PNAME_NS:
        t = jj_consume_token(PNAME_NS);
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.setValue(t.image);
            appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BlankNode(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) BlankNode */
  ASTBlankNode jjtn000 = new ASTBlankNode(JJTBLANKNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLANK_NODE_LABEL:
        t = jj_consume_token(BLANK_NODE_LABEL);
                                jjtn000.setID(t.image.substring(2));
        break;
      case ANON:
        t = jj_consume_token(ANON);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      appendToken(sb, t);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void IRI(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) IRI */
  ASTIRI jjtn000 = new ASTIRI(JJTIRI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(Q_IRI_REF);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setValue(_trimString(t.image, 1)); appendToken(sb, t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/// SPARQL 1.1 Update productions
  final public void GraphRefAll() throws ParseException {
 /*@bgen(jjtree) GraphRefAll */
  ASTGraphRefAll jjtn000 = new ASTGraphRefAll(JJTGRAPHREFALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        GraphRef();
        break;
      case DEFAULT_GRAPH:
        jj_consume_token(DEFAULT_GRAPH);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setDefault(true);
        break;
      case NAMED:
        jj_consume_token(NAMED);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setNamed(true);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphOrDefault() throws ParseException {
 /*@bgen(jjtree) GraphOrDefault */
  ASTGraphOrDefault jjtn000 = new ASTGraphOrDefault(JJTGRAPHORDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_GRAPH:
        jj_consume_token(DEFAULT_GRAPH);
        break;
      case GRAPH:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GRAPH:
          jj_consume_token(GRAPH);
          break;
        default:
          jj_la1[140] = jj_gen;
          ;
        }
        IRIref(null);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GraphRef() throws ParseException {
    jj_consume_token(GRAPH);
    IRIref(null);
  }

  final public void QuadData() throws ParseException {
    jj_consume_token(LBRACE);
    Quads();
    jj_consume_token(RBRACE);
  }

  final public void Quads() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACK:
    case NIL:
    case ANON:
    case TRUE:
    case FALSE:
    case Q_IRI_REF:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case INTEGER:
    case INTEGER_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL:
    case DECIMAL_POSITIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE:
    case DOUBLE_POSITIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      TriplesTemplate(null);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_28;
      }
      QuadsNotTriples();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACK:
      case NIL:
      case ANON:
      case TRUE:
      case FALSE:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        TriplesTemplate(null);
        break;
      default:
        jj_la1[145] = jj_gen;
        ;
      }
    }
  }

  final public void QuadsNotTriples() throws ParseException {
 /*@bgen(jjtree) QuadsNotTriples */
  ASTQuadsNotTriples jjtn000 = new ASTQuadsNotTriples(JJTQUADSNOTTRIPLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GRAPH);
      VarOrIRIref(null);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACK:
      case NIL:
      case ANON:
      case TRUE:
      case FALSE:
      case Q_IRI_REF:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case INTEGER:
      case INTEGER_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL:
      case DECIMAL_POSITIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE:
      case DOUBLE_POSITIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        TriplesTemplate(null);
        break;
      default:
        jj_la1[146] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Update() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOAD:
      Load();
      break;
    case CLEAR:
      Clear();
      break;
    case DROP:
      Drop();
      break;
    case ADD:
      Add();
      break;
    case MOVE:
      Move();
      break;
    case COPY:
      Copy();
      break;
    case CREATE:
      Create();
      break;
    default:
      jj_la1[147] = jj_gen;
      if (jj_2_6(2)) {
        InsertData();
      } else if (jj_2_7(2)) {
        DeleteData();
      } else if (jj_2_8(2)) {
        DeleteWhere();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
        case DELETE:
        case WITH:
          Modify();
          break;
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Load() throws ParseException {
 /*@bgen(jjtree) Load */
  ASTLoad jjtn000 = new ASTLoad(JJTLOAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                      jjtn000.setSilent(true);
        break;
      default:
        jj_la1[149] = jj_gen;
        ;
      }
      IRIref(null);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTO:
        jj_consume_token(INTO);
        GraphRef();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Clear() throws ParseException {
 /*@bgen(jjtree) Clear */
  ASTClear jjtn000 = new ASTClear(JJTCLEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLEAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                           jjtn000.setSilent(true);
        break;
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      GraphRefAll();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Drop() throws ParseException {
 /*@bgen(jjtree) Drop */
  ASTDrop jjtn000 = new ASTDrop(JJTDROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DROP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                          jjtn000.setSilent(true);
        break;
      default:
        jj_la1[152] = jj_gen;
        ;
      }
      GraphRefAll();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Add() throws ParseException {
 /*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ADD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                         jjtn000.setSilent(true);
        break;
      default:
        jj_la1[153] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(TO);
      GraphOrDefault();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Move() throws ParseException {
 /*@bgen(jjtree) Move */
  ASTMove jjtn000 = new ASTMove(JJTMOVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOVE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                          jjtn000.setSilent(true);
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(TO);
      GraphOrDefault();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Copy() throws ParseException {
 /*@bgen(jjtree) Copy */
  ASTCopy jjtn000 = new ASTCopy(JJTCOPY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COPY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                          jjtn000.setSilent(true);
        break;
      default:
        jj_la1[155] = jj_gen;
        ;
      }
      GraphOrDefault();
      jj_consume_token(TO);
      GraphOrDefault();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Create() throws ParseException {
 /*@bgen(jjtree) Create */
  ASTCreate jjtn000 = new ASTCreate(JJTCREATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                            jjtn000.setSilent(true);
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
      GraphRef();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InsertData() throws ParseException {
 /*@bgen(jjtree) InsertData */
  ASTInsertData jjtn000 = new ASTInsertData(JJTINSERTDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSERT);
      jj_consume_token(DATA);
      QuadData();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeleteData() throws ParseException {
 /*@bgen(jjtree) DeleteData */
  ASTDeleteData jjtn000 = new ASTDeleteData(JJTDELETEDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DELETE);
      jj_consume_token(DATA);
      QuadData();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeleteWhere() throws ParseException {
 /*@bgen(jjtree) DeleteWhere */
  ASTDeleteWhere jjtn000 = new ASTDeleteWhere(JJTDELETEWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DELETE);
      jj_consume_token(WHERE);
      QuadData();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DeleteClause() throws ParseException {
 /*@bgen(jjtree) DeleteClause */
  ASTDeleteClause jjtn000 = new ASTDeleteClause(JJTDELETECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DELETE);
      QuadData();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InsertClause() throws ParseException {
 /*@bgen(jjtree) InsertClause */
  ASTInsertClause jjtn000 = new ASTInsertClause(JJTINSERTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSERT);
      QuadData();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UsingClause() throws ParseException {
 /*@bgen(jjtree) DatasetClause */
  ASTDatasetClause jjtn000 = new ASTDatasetClause(JJTDATASETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMED:
        jj_consume_token(NAMED);
                      jjtn000.setNamed(true);
        break;
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      IRIref(null);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Modify() throws ParseException {
 /*@bgen(jjtree) Modify */
  ASTModify jjtn000 = new ASTModify(JJTMODIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        IRIref(null);
        break;
      default:
        jj_la1[158] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
        DeleteClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
          InsertClause();
          break;
        default:
          jj_la1[159] = jj_gen;
          ;
        }
        break;
      case INSERT:
        InsertClause();
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USING:
          ;
          break;
        default:
          jj_la1[161] = jj_gen;
          break label_29;
        }
        UsingClause();
      }
      jj_consume_token(WHERE);
      GroupGraphPattern(null);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_44()) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(DOUBLE_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(DECIMAL_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(INTEGER_NEGATIVE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(DOUBLE_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(DECIMAL_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(INTEGER_POSITIVE)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(IS_A)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(INVERSE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(Q_IRI_REF)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(BLANK_NODE_LABEL)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public SyntaxTreeBuilderTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[162];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x1000010,0x10,0x0,0x0,0xc0000110,0x0,0x40,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x40000010,0x0,0x40000010,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0xc0000110,0x1000,0x40,0x0,0x1000,0xc0000110,0x1000,0xc0000110,0x0,0xc0000110,0x0,0x1000,0x1000,0x40,0x0,0x0,0x0,0x10,0x800,0x40000010,0x0,0xc0000110,0x0,0x400,0x800,0x10080010,0xc0000110,0x10080010,0x10080010,0x8000000,0x4000000,0x10000000,0x3400040,0x80010,0x8000000,0x10000000,0x10000010,0x0,0x10000000,0x80,0x880,0x800,0x3400040,0x0,0x110,0xc0000110,0xc0000110,0xc0000000,0x0,0x0,0xc0000000,0x100000,0x200000,0x7e000,0x7e000,0xc00000,0xc00000,0x5000000,0x5000000,0x400000,0xc80010,0x10,0x0,0x0,0x0,0x1c80010,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x40000010,0x800,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0xc0000110,0x0,0x1000,0xc0000110,0xc0000110,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x4,0x78,0x400,0x0,0x180,0x180,0x0,0x0,0x0,0x400,0x0,0x0,0x400,0x1000,0x0,0x0,0x0,0x400,0x0,0x800,0x1000,0x0,0x0,0x0,0x0,0x0,0x4000,0x2000000,0x2000,0xc0000,0xfc000000,0xfc030000,0x200,0xfc000000,0x30000,0x30000,0xfc030000,0x80000,0x40000,0xc0000,0x8,0x1000000,0x0,0xb00000,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x0,0x0,0xb00000,0x8,0x400000,0x0,0xfc000000,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc000000,0xfc000000,0x0,0x0,0x80,0xfc000000,0x80,0x80,0x80,0x80,0x80,0x80,0x0,0xfc000000,0x40000000,0x0,0xb0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200800,0x200000,0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x1800000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x11800000,0x0,0x11800000,0x0,0x0,0x0,0x0,0xe0400fff,0xe0400fff,0x0,0xe0400fff,0x0,0x0,0xe0400fff,0x0,0x0,0x0,0x0,0x3800000,0x0,0x4000000,0x2000000,0x0,0x1800000,0x0,0x1800000,0x2000000,0x3800000,0x2000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0xe0400fff,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x1800000,0x1800000,0x0,0x0,0x1800000,0x0,0x0,0x3000,0x3000,0x0,0x0,0x0,0x0,0x0,0xe1dfcfff,0xe0400fff,0x19fc000,0x1fc000,0x0,0xe1dfcfff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0400fff,0xe0400000,0x0,0x7bc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3f,0x7c0,0x0,0xff800,0x3f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x18000,0x0,0x0,0x873df800,0x0,0x0,0x0,0x1b800,0x1b800,0x0,0x0,0x0,0x0,0x18000,0x0,0x873c3800,0x0,0x873c3800,0x0,0x0,0x0,0x0,0x1b800,0x1b800,0x0,0x1b800,0x0,0x0,0x1b800,0x0,0x0,0x0,0x0,0x873df800,0x0,0x0,0x0,0x0,0x873df800,0x0,0x873df800,0x0,0x873df800,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x3800,0x0,0x0,0x1b800,0x873df800,0x1b800,0x0,0x0,0x1b800,0x873df800,0x1b800,0x1b800,0x0,0x0,0x0,0x0,0x3800,0x0,0x3800,0x3800,0x3800,0x3800,0x40000,0x0,0x40000,0x0,0x1b800,0x0,0x873df800,0x873df800,0x873df800,0x1b800,0x18000,0x873c7800,0x0,0x0,0x0,0x0,0x83180000,0x83180000,0x0,0x0,0x0,0x873db800,0x0,0x873db800,0x0,0x0,0x873db800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x873c0000,0x4240000,0x81080000,0x2100000,0x0,0x0,0x0,0x0,0x3800,0x3000,0x4000,0xc0,0x0,0x3840,0x873df800,0x0,0x0,0x873df800,0x873df800,0x1,0x1a,0x20,0x100,0x20,0x20,0x20,0x20,0x20,0x20,0x0,0x10,0x2,0xa,0x400,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x1f,0x0,0x1f,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x1f,0x1f,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1f,0x0,0x1f,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x6,0x18,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x1f,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SyntaxTreeBuilder(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxTreeBuilder(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxTreeBuilderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SyntaxTreeBuilder(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SyntaxTreeBuilderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SyntaxTreeBuilder(SyntaxTreeBuilderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SyntaxTreeBuilderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[182];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 162; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 182; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
